Some things to note:

On the first request for a leader board for a given month, year and club combination we get it and store it in the database for future use

This some what of a naive implementation. For a production system we should add some more levels of caching.  Perhaps precomputing the total elevation for a given member for a given month and saving that in cache or a database table.  We also would probably want to spawn the leaderboard building method as a background process so the client does not have to wait for a reponse and we dont block any threads that could be handling requests.

There is a refresh link that will force to go back to the api and get fresh data.  We only do this if explicitly requested by the user.

Error handling is also simplified.  For any exception we log it and return an error view.  In production we would want to display some more info to the user as to what went wrong.

There are a few tests, for a production system I would ideally like to have some more coverage.


known issues:
If a member is one more than one team ( not sure if that is possible) they will only be counted for the first club they are created for.
If a user leaves a club they will not be deleted from the club
